/**
 * Copyright (c) 2013-2015  Patrick Nicolas - Scala for Machine Learning - All rights reserved
 *
 * The source code in this file is provided by the author for the sole purpose of illustrating the 
 * concepts and algorithms presented in "Scala for Machine Learning". It should not be used to build commercial applications. 
 * ISBN: 978-1-783355-874-2 Packt Publishing.
 * Unless required by applicable law or agreed to in writing, software is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * Version 0.98
 */
package org.scalaml.app.chap9

import org.scalaml.supervised.nnet.{MLPConfig, MLP}
import org.scalaml.core.Types.ScalaMl.DblVector
import org.scalaml.util.DisplayUtils
import org.scalaml.app.Eval


		/**
		 * <p><b>Purpose:</b>Singleton to evaluate the multi-layer perceptron using 
		 * synthetic data generated by random generators</p>
		 * 
		 *  @author Patrick Nicolas
		 *  @note Scala for Machine Learning Chapter 9: Artificial Neural Network/Evaluation/Test case
		 */
object BinaryMLPTest extends Eval {
	import org.apache.log4j.Logger
	import scala.util.{Random, Try, Success, Failure}
	
		/**
		 * Name of the evaluation 
		 */
	val name: String = "BinaryMLPTest"

	private val ALPHA = 0.4
	private val ETA = 0.2
	private val SIZE_HIDDEN_LAYER = Array[Int](1)
	private val NUM_EPOCHS = 1000
	private val TEST_SIZE: Int  = 8
	private val EPS = 1e-4
	private val ACTIVATION = (x: Double) => 1.0/(1.0 + Math.exp(-x))

	private val x1 = Array.tabulate(TEST_SIZE)(x => Array[Double](1.0 + 0.001*Random.nextDouble))
	private val x2 =  Array.tabulate(TEST_SIZE)(x => Array[Double](2.0 + 0.001*Random.nextDouble))
	private val z = Array.tabulate(TEST_SIZE)(x => Array[Double](0.3 + 0.05*Random.nextDouble))
	private val x = x1 ++ x2
      
	private val y: DblVector = Array.fill(TEST_SIZE)(0.0) ++ Array.fill(TEST_SIZE)(1.0)
	
		/** <p>Execution of the scalatest for <b>MLP</b> class.
		 * This method is invoked by the  actor-based test framework function, ScalaMlTest.evaluate</p>
		 * @param args array of arguments used in the test
		 * @return -1 in case error a positive or null value if the test succeeds. 
		 */
	def run(args: Array[String]): Int = {
		val config = MLPConfig(ALPHA, ETA, SIZE_HIDDEN_LAYER, NUM_EPOCHS, EPS, ACTIVATION)
	       
		implicit val mlpObjective = new MLP.MLPBinClassifier
		
		Try {
			val mlpClassifier = MLP[Double](config, x, y)
		      
			x.zip(y).foldLeft(0)((s, xy) => {
				val output = mlpClassifier |> xy._1
				if(Math.abs(output(1) - xy._2) < 0.1) 
					s + 1 
				else 
					s
			})
		} match {
		  case Success(n) => { 
		    val acc = n.toDouble/x.size
		  	DisplayUtils.show(s"$name Accuracy is $acc, it should be 1.0", logger)
		  }
		  case Failure(e) => failureHandler(e)
		}	   
	}
}

// -----------------------  EOF ----------------------------------------